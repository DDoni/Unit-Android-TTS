package com.Ebook.Unicorn;

import java.util.ArrayList;
import android.content.Intent;

import android.os.Bundle;

import android.os.Handler;

import android.os.Message;

import android.speech.RecognitionListener;

import android.speech.RecognizerIntent;

import android.speech.SpeechRecognizer;

 

import com.unity3d.player.UnityPlayer;

 

public class VoiceTest extends UnityPlayerActivity {

 

private ArrayList<String> mResult; // 결과 값 저장 변수

private SpeechRecognizer mRecognizer; // 음성인식 객체

private final int READY = 0, END = 1, FINISH = 2; // 핸들러 메시지. 음성인식

public String funcName; // 유니티 스크립트 이름

public int errorCheck = 0;

private Handler mHandler = new Handler() {

      public void handleMessage(Message msg) {

                              switch (msg.what) {

                              case READY:

                                              System.out.println("ready");

                                              break;

                              case END:

                                              // 인식 시간 5초로 설정. 5초 지나면 신경안씀.

                                              sendEmptyMessageDelayed(FINISH, 2000);

                                              break;

                              case FINISH:

                                              finish(); // 앱 종료

                                              break;

                              }

              }

};

 

@Override

protected void onCreate(Bundle savedInstanceState) {

              super.onCreate(savedInstanceState);

 

}

 

// 음성인식 도입부 - 유니티에서 이 함수를 호출하여 시작

public void VoicePlug(String funcName) {

              this.funcName = funcName;

              // 음성인식 intent 생성

              final Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);

 

              // 데이터 설정

              i.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getPackageName());

              i.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ko-KR"); // 음성인식 언어

              new Thread(new Runnable() {

                              @Override

                              public void run() {

                                              runOnUiThread(new Runnable() {

 

                                                              @Override

                                                              public void run() {

                                                                              // TODO Auto-generated method stub

                                                                              // 음성인식 객체 생성

 

                                                                              mRecognizer = SpeechRecognizer

                                                                                                              .createSpeechRecognizer(getApplicationContext());

 

                                                                              // 음성인식 리스너 등록

                                                                              mRecognizer.setRecognitionListener(listener);

 

                                                                              // 음성인식 시작

                                                                              mRecognizer.startListening(i);

                                                                              // speak.setActive(ture)

                                                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,

                                                                                                              "SetJava", "true");

                                                              }

 

                                              });

                              }

              }).start();

}

 

// 음성인식 리스너

private RecognitionListener listener = new RecognitionListener() {

              // 입력 소리 변경 시

              @Override

              public void onRmsChanged(float rmsdB) {

              }

 

              // 음성 인식 결과 받음

              @Override

              public void onResults(Bundle results) {

                              mHandler.removeMessages(END); // 핸들러에 종료 메시지 삭제

                              Intent i = new Intent(); // 결과 반환할 intent

                              i.putExtras(results); // 결과 등록

 

                              resultData(i);

              }

 

              // 음성 인식 준비가 되었으면

              @Override

              public void onReadyForSpeech(Bundle params) {

                              mHandler.sendEmptyMessage(READY); // 핸들러에 메시지 보냄

              }

 

              // 음성 입력이 끝났으면

              @Override

              public void onEndOfSpeech() {

                              mHandler.sendEmptyMessage(END); // 핸들러에 메시지 보냄

                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName, "SetJava",

                                                              "false"); // 삐빅하는 사이에는 BGM을 끄는 용도

                              System.out.println("endspeech"); 

              }

 

              // 에러가 발생하면

              @Override

              public void onError(int error) {

 

                              String msg = null;

                              if (errorCheck < 1) { // 다중 실행 방지

                                              switch (error) {

                                              case SpeechRecognizer.ERROR_AUDIO:

                                                              msg = "오디오 입력 중 오류가 발생했습니다.";

                                                              break;

                                              case SpeechRecognizer.ERROR_CLIENT:

                                                              msg = "단말에서 오류가 발생했습니다.";

                                                              break;

                                              case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS:

                                                              msg = "권한이 없습니다.";

                                                              break;

                                              case SpeechRecognizer.ERROR_NETWORK:

                                              case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:

                                                              msg = "네트워크 오류가 발생했습니다.";

                                                              mHandler.postDelayed(new Runnable() {

                                                                              @Override

                                                                              public void run() {

                                                                                              // TODO Auto-generated method stub

                                                                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,

                                                                                              "SetJava", "error"); // 유니티에 재실행 요청

                                                                              }

                                                              }, 1000);

                                                              break;

                                              case SpeechRecognizer.ERROR_NO_MATCH:

                                                              msg = "일치하는 항목이 없습니다.";

                                                              mHandler.postDelayed(new Runnable() {

                                                                              @Override

                                                                              public void run() {

                                                                                              // TODO Auto-generated method stub

                                                                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,

                                                                                              "SetJava", "error"); // 유니티에 재실행 요청

                                                                              }

                                                              }, 1000);

                                                              break;

                                              case SpeechRecognizer.ERROR_RECOGNIZER_BUSY:

                                                              msg = "음성인식 서비스가 과부하 되었습니다.";

                                                              break;

                                              case SpeechRecognizer.ERROR_SERVER:

                                                              msg = "서버에서 오류가 발생했습니다.";

                                                              break;

                                              case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:

                                                              msg = "입력이 없습니다.";

                                                              mHandler.postDelayed(new Runnable() {

                                                                              @Override

                                                                              public void run() {

                                                                                              // TODO Auto-generated method stub

                                                                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,

                                                                                              "SetJava", "error"); // 유니티에 재실행 요청

                                                                              }

                                                              }, 1000);

                                                              break;

                                              }

                              }

                              System.out.println("msg : " + msg);

                              System.out.println("errorCheck : " + errorCheck);

              }

 

              @Override

              public void onBeginningOfSpeech() {

              } // 입력이 시작되면

 

              @Override

              public void onPartialResults(Bundle partialResults) {

              } // 인식 결과의 일부가 유효할 때

 

              @Override

              public void onEvent(int eventType, Bundle params) {

              } // 미래의 이벤트를 추가하기 위해 미리 예약되어진 함수

 

              @Override

              public void onBufferReceived(byte[] buffer) {

              } // 더 많은 소리를 받을 때

};

 

@Override

public void finish() {

              if (mRecognizer != null) {

                              mRecognizer.stopListening(); // 음성인식 중지

              }

              mHandler.removeMessages(READY); // 메시지 삭제

              mHandler.removeMessages(END); // 메시지 삭제

              mHandler.removeMessages(FINISH); // 메시지 삭제

}

 

private void resultData(Intent data) {

              String key = SpeechRecognizer.RESULTS_RECOGNITION; // 키값 설정

              mResult = data.getStringArrayListExtra(key); // 인식된 데이터 list 받아옴.

              String[] result = new String[mResult.size()]; // 배열생성. 다이얼로그에서 출력하기 위해

              mResult.toArray(result); // list 배열로 변환

 

              // *중요* 유니티로 데이터 전송 메소드

              // UnityPlayer.UnitySendMessage(스크립트명, 스크립트 함수명, 전송 데이터)

              // 유니티 AndroidManager.cs 내 SetJavaLog 함수에서 mResult 값을 받아서 사용

              // String 타입만 전송 가능하기 때문에 하나씩 보내줘야함

              for (int i = 0; i < mResult.size(); i++) {

                              if (i == mResult.size() - 1) {

                                              // 마지막 결과 값일 경우, 마지막 값과 끝났다는 신호를 보냄

                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,"SetJava", mResult.get(i));

                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,"SetJava", "end");

 

                              } else // 마지막 전 값들 전송

                                              UnityPlayer.UnitySendMessage(VoiceTest.this.funcName,"SetJava", mResult.get(i));

              }

}
